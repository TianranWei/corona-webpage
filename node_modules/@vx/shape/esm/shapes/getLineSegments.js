// import memoize from 'lodash/memoize';
var MEASUREMENT_ELEMENT_ID = '__vx_splitpath_svg_path_measurement_id';

function getLineSegments(path, segments, sampleRate) {
  if (sampleRate === void 0) {
    sampleRate = 0.25;
  }

  try {
    var pathElement = document.getElementById(MEASUREMENT_ELEMENT_ID); // create a single path element if not done already

    if (!pathElement) {
      var svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
      svg.style.width = '0';
      svg.style.height = '0';
      svg.style.position = 'absolute';
      svg.style.top = '-100%';
      svg.style.left = '-100%';
      pathElement = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      pathElement.setAttribute('id', MEASUREMENT_ELEMENT_ID);
      svg.appendChild(pathElement);
      document.body.appendChild(svg);
    }

    pathElement.setAttribute('d', path);
    var totalPathLength = pathElement.getTotalLength();
    var totalPieces = segments.reduce(function (sum, curr) {
      return sum + curr.length;
    }, 0);
    var pieceSize = totalPathLength / totalPieces;
    var cumulativeSize = 0;
    var lineSegments = segments.map(function (segment, segmentIndex) {
      var segmentPointCount = segment.length;
      var coords = [];

      for (var i = 0; i < segmentPointCount + sampleRate; i += sampleRate) {
        var distance = cumulativeSize * pieceSize + i * pieceSize;
        var point = pathElement.getPointAtLength(distance);
        coords.push(point);
      } //   segment.forEach((datum, datumIndex) => {
      //     // create samplesPerPoint along the path for each actual point.
      //     new Array(samplesPerPoint).fill(0).forEach((_, sampleIndex) => {
      //       const distance =
      //         datumIndex * datumIndex +
      //         (pieceSize * sampleIndex) / samplesPerPoint +
      //         cumulativeSize * pieceSize;
      //       const point = pathElement!.getPointAtLength(distance);
      //       coords.push(point);
      //     });
      //   });


      cumulativeSize += segmentPointCount;
      return coords;
    });
    return lineSegments;
  } catch (e) {
    return [];
  }
} // cache on d attributes
// export default memoize(getLineSegments, (paths) => paths.join('-'));


export default getLineSegments;