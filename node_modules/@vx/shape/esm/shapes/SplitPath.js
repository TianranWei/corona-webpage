import _pt from "prop-types";
import React from 'react';
import LinePath from './LinePath';
import getLineSegments from './getLineSegments';
export default function SplitPath(_ref) {
  var curve = _ref.curve,
      segments = _ref.data,
      defined = _ref.defined,
      x = _ref.x,
      y = _ref.y;
  // combine data to first draw entire path
  var flatData = segments.reduce(function (flat, segmentData) {
    return flat.concat([].concat(segmentData));
  }, []);
  return React.createElement(LinePath, {
    data: flatData,
    defined: defined,
    curve: curve,
    x: x,
    y: y
  }, function (_ref2) {
    var path = _ref2.path;
    var wholePathDAttribute = path(flatData);
    var computedLineSegments = getLineSegments(wholePathDAttribute || '', segments);
    return computedLineSegments.map(function (segment, i) {
      return React.createElement(LinePath, {
        key: i,
        data: segment,
        x: function x(d) {
          return d.x;
        },
        y: function y(d) {
          return d.y;
        }
      });
    });
  });
}
SplitPath.propTypes = {
  data: _pt.arrayOf(_pt.arrayOf(_pt.any)).isRequired,
  styles: _pt.arrayOf(_pt.any).isRequired,
  curve: _pt.any,
  defined: _pt.func,
  x: _pt.func,
  y: _pt.func
};