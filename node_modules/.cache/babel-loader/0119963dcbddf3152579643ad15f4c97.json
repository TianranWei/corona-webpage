{"ast":null,"code":"var _jsxFileName = \"/Users/noah/workplace/javascript/corona-tracker/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  data: {\n    confirmed,\n    recovered,\n    date\n  }\n}) => {\n  const [dailyData, setDailyData] = useState({});\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n      setDailyData(initialDailyData);\n    };\n\n    fetchMyAPI();\n  }, []);\n  const lineChart = dailyData[0] ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(data => data.confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(data => data.deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 3\n    }\n  }, lineChart);\n};\n\nexport default Chart; // const Chart = ({ dailyData }) => {\n// \twhile (!dailyData.length) {\n// \t\treturn 'Loading....';\n// \t}\n// \tconsole.log(dailyData);\n// \tlet result = dailyData.map(({ confirmed }) => confirmed);\n// \tlet deaths = dailyData.map(({ deaths }) => deaths);\n// \tlet date = dailyData.map(({ date }) => date);\n// \tconsole.log(result);\n// \tconst lineChart = (\n// \t\t<Line\n// \t\t\tdata={{\n// \t\t\t\tlables: [1,2,3,4,5,6],\n// \t\t\t\tdatasets: [\n// \t\t\t\t\t{\n// \t\t\t\t\t\tdata: [10000,20000,30000,40000,50000,60000],\n// \t\t\t\t\t\tlabel: 'Infected',\n// \t\t\t\t\t\tborderColor: '#3333ff',\n// \t\t\t\t\t\tfill: true\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\tdata: [1000,2000,3000,4000,50000,60000],\n// \t\t\t\t\t\tlabel: 'Deaths',\n// \t\t\t\t\t\tborderColor: 'red',\n// \t\t\t\t\t\tbackgroundColor: 'rgba(225,0,0,0.5)',\n// \t\t\t\t\t\tfill: true\n// \t\t\t\t\t}\n// \t\t\t\t]\n// \t\t\t}}\n// \t\t/>\n// \t);\n// \t// ctx = document.getElementById(\"Chart1\").getContext(\"2d\");\n// \t// var lineChart = new Chart(ctx, {\n// \t// \ttype: 'line',\n// \t// \tdata: data,\n// \t//   });\n// \treturn <div className={styles.container}>{lineChart}</div>;\n// };\n// export default Chart;","map":{"version":3,"sources":["/Users/noah/workplace/javascript/corona-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","Line","Bar","fetchDailyData","styles","Chart","data","confirmed","recovered","date","dailyData","setDailyData","fetchMyAPI","initialDailyData","lineChart","labels","map","datasets","label","borderColor","fill","deaths","backgroundColor","container"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AAEA,SAASC,cAAT,QAA+B,WAA/B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;;AAGA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB;AAAR,CAAD,KAA+C;AAC5D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,UAAU,GAAG,YAAY;AAChC,YAAMC,gBAAgB,GAAG,MAAMV,cAAc,EAA7C;AAEAQ,MAAAA,YAAY,CAACE,gBAAD,CAAZ;AACE,KAJD;;AAMAD,IAAAA,UAAU;AACX,GARQ,EAQN,EARM,CAAT;AAWA,QAAME,SAAS,GACdJ,SAAS,CAAC,CAAD,CAAT,gBACE,oBAAC,IAAD;AACD,IAAA,IAAI,EAAE;AACJK,MAAAA,MAAM,EAAEL,SAAS,CAACM,GAAV,CAAc,CAAC;AAAEP,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADJ;AAEJQ,MAAAA,QAAQ,EAAE,CAAC;AACZX,QAAAA,IAAI,EAAEI,SAAS,CAACM,GAAV,CAAeV,IAAD,IAAUA,IAAI,CAACC,SAA7B,CADM;AAEZW,QAAAA,KAAK,EAAE,UAFK;AAGZC,QAAAA,WAAW,EAAE,SAHD;AAIZC,QAAAA,IAAI,EAAE;AAJM,OAAD,EAKP;AACJd,QAAAA,IAAI,EAAEI,SAAS,CAACM,GAAV,CAAeV,IAAD,IAAUA,IAAI,CAACe,MAA7B,CADF;AAEJH,QAAAA,KAAK,EAAE,QAFH;AAGJC,QAAAA,WAAW,EAAE,KAHT;AAIJG,QAAAA,eAAe,EAAE,sBAJb;AAKJF,QAAAA,IAAI,EAAE;AALF,OALO;AAFN,KADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAmBI,IApBL;AAuBE,sBACD;AAAK,IAAA,SAAS,EAAEhB,MAAM,CAACmB,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIT,SADJ,CADC;AAKD,CA1CF;;AA4CC,eAAeT,KAAf,C,CAOD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css';\n\n\nconst Chart = ({ data: { confirmed, recovered, date }  }) => {\n\tconst [dailyData, setDailyData] = useState({});\n  \n\tuseEffect(() => {\n\t  const fetchMyAPI = async () => {\n\t\tconst initialDailyData = await fetchDailyData();\n  \n\t\tsetDailyData(initialDailyData);\n\t  };\n  \n\t  fetchMyAPI();\n\t}, []);\n\n\n\tconst lineChart = (\n\t\tdailyData[0] ? (\n\t\t  <Line\n\t\t\tdata={{\n\t\t\t  labels: dailyData.map(({ date }) => date),\n\t\t\t  datasets: [{\n\t\t\t\tdata: dailyData.map((data) => data.confirmed),\n\t\t\t\tlabel: 'Infected',\n\t\t\t\tborderColor: '#3333ff',\n\t\t\t\tfill: true,\n\t\t\t  }, {\n\t\t\t\tdata: dailyData.map((data) => data.deaths),\n\t\t\t\tlabel: 'Deaths',\n\t\t\t\tborderColor: 'red',\n\t\t\t\tbackgroundColor: 'rgba(255, 0, 0, 0.5)',\n\t\t\t\tfill: true,\n\t\t\t  },\n\t\t\t  ],\n\t\t\t}}\n\t\t  />\n\t\t) : null\n\t  );\n\t\n\t  return (\n\t\t<div className={styles.container}>\n\t\t  { lineChart}\n\t\t</div>\n\t  );\n\t};\n\t\n\texport default Chart;\n\n\n\n\n\n\n// const Chart = ({ dailyData }) => {\n// \twhile (!dailyData.length) {\n// \t\treturn 'Loading....';\n// \t}\n// \tconsole.log(dailyData);\n\n// \tlet result = dailyData.map(({ confirmed }) => confirmed);\n// \tlet deaths = dailyData.map(({ deaths }) => deaths);\n// \tlet date = dailyData.map(({ date }) => date);\n// \tconsole.log(result);\n\n// \tconst lineChart = (\n// \t\t<Line\n// \t\t\tdata={{\n// \t\t\t\tlables: [1,2,3,4,5,6],\n// \t\t\t\tdatasets: [\n// \t\t\t\t\t{\n// \t\t\t\t\t\tdata: [10000,20000,30000,40000,50000,60000],\n// \t\t\t\t\t\tlabel: 'Infected',\n// \t\t\t\t\t\tborderColor: '#3333ff',\n// \t\t\t\t\t\tfill: true\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\tdata: [1000,2000,3000,4000,50000,60000],\n// \t\t\t\t\t\tlabel: 'Deaths',\n// \t\t\t\t\t\tborderColor: 'red',\n// \t\t\t\t\t\tbackgroundColor: 'rgba(225,0,0,0.5)',\n// \t\t\t\t\t\tfill: true\n// \t\t\t\t\t}\n// \t\t\t\t]\n// \t\t\t}}\n// \t\t/>\n// \t);\n// \t// ctx = document.getElementById(\"Chart1\").getContext(\"2d\");\n// \t// var lineChart = new Chart(ctx, {\n// \t// \ttype: 'line',\n// \t// \tdata: data,\n// \t//   });\n\n// \treturn <div className={styles.container}>{lineChart}</div>;\n// };\n\n// export default Chart;\n"]},"metadata":{},"sourceType":"module"}