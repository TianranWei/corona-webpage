{"ast":null,"code":"var _jsxFileName = \"/Users/noah/workplace/javascript/corona-tracker/src/components/Chart/Chart.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { fetchDailyData } from '../../api';\nimport styles from './Chart.module.css';\n\nconst Chart = ({\n  dailyData: {\n    confirmed,\n    recovered,\n    deaths\n  },\n  country\n}) => {\n  const [dailyData, setDailyData] = useState({});\n  useEffect(() => {\n    const fetchMyAPI = async () => {\n      const initialDailyData = await fetchDailyData();\n      setDailyData(initialDailyData);\n    };\n\n    fetchMyAPI();\n  }, []);\n  const barChart = confirmed ? /*#__PURE__*/React.createElement(Bar, {\n    data: {\n      labels: ['Infected', 'Recovered', 'Deaths'],\n      datasets: [{\n        label: 'People',\n        backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n        data: [confirmed.value, recovered.value, deaths.value]\n      }]\n    },\n    options: {\n      legend: {\n        display: false\n      },\n      title: {\n        display: true,\n        text: `Current state in ${country}`\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }) : null;\n  const lineChart = dailyData[0] ? /*#__PURE__*/React.createElement(Line, {\n    data: {\n      labels: dailyData.map(({\n        date\n      }) => date),\n      datasets: [{\n        data: dailyData.map(data => data.confirmed),\n        label: 'Infected',\n        borderColor: '#3333ff',\n        fill: true\n      }, {\n        data: dailyData.map(data => data.deaths),\n        label: 'Deaths',\n        borderColor: 'red',\n        backgroundColor: 'rgba(255, 0, 0, 0.5)',\n        fill: true\n      }]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }) : null;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 3\n    }\n  }, lineChart);\n};\n\nexport default Chart; // const Chart = ({ dailyData }) => {\n// \twhile (!dailyData.length) {\n// \t\treturn 'Loading....';\n// \t}\n// \tconsole.log(dailyData);\n// \tlet result = dailyData.map(({ confirmed }) => confirmed);\n// \tlet deaths = dailyData.map(({ deaths }) => deaths);\n// \tlet date = dailyData.map(({ date }) => date);\n// \tconsole.log(result);\n// \tconst lineChart = (\n// \t\t<Line\n// \t\t\tdata={{\n// \t\t\t\tlables: [1,2,3,4,5,6],\n// \t\t\t\tdatasets: [\n// \t\t\t\t\t{\n// \t\t\t\t\t\tdata: [10000,20000,30000,40000,50000,60000],\n// \t\t\t\t\t\tlabel: 'Infected',\n// \t\t\t\t\t\tborderColor: '#3333ff',\n// \t\t\t\t\t\tfill: true\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\tdata: [1000,2000,3000,4000,50000,60000],\n// \t\t\t\t\t\tlabel: 'Deaths',\n// \t\t\t\t\t\tborderColor: 'red',\n// \t\t\t\t\t\tbackgroundColor: 'rgba(225,0,0,0.5)',\n// \t\t\t\t\t\tfill: true\n// \t\t\t\t\t}\n// \t\t\t\t]\n// \t\t\t}}\n// \t\t/>\n// \t);\n// \t// ctx = document.getElementById(\"Chart1\").getContext(\"2d\");\n// \t// var lineChart = new Chart(ctx, {\n// \t// \ttype: 'line',\n// \t// \tdata: data,\n// \t//   });\n// \treturn <div className={styles.container}>{lineChart}</div>;\n// };\n// export default Chart;","map":{"version":3,"sources":["/Users/noah/workplace/javascript/corona-tracker/src/components/Chart/Chart.jsx"],"names":["React","useState","useEffect","Line","Bar","fetchDailyData","styles","Chart","dailyData","confirmed","recovered","deaths","country","setDailyData","fetchMyAPI","initialDailyData","barChart","labels","datasets","label","backgroundColor","data","value","legend","display","title","text","lineChart","map","date","borderColor","fill","container"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;AAEA,SAASC,cAAT,QAA+B,WAA/B;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;;AAGA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAE;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,SAAb;AAAwBC,IAAAA;AAAxB,GAAb;AAAgDC,EAAAA;AAAhD,CAAD,KAA+D;AAC5E,QAAM,CAACJ,SAAD,EAAYK,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,UAAU,GAAG,YAAY;AAChC,YAAMC,gBAAgB,GAAG,MAAMV,cAAc,EAA7C;AAEAQ,MAAAA,YAAY,CAACE,gBAAD,CAAZ;AACE,KAJD;;AAMAD,IAAAA,UAAU;AACX,GARQ,EAQN,EARM,CAAT;AAWA,QAAME,QAAQ,GACbP,SAAS,gBACP,oBAAC,GAAD;AACD,IAAA,IAAI,EAAE;AACJQ,MAAAA,MAAM,EAAE,CAAC,UAAD,EAAa,WAAb,EAA0B,QAA1B,CADJ;AAEJC,MAAAA,QAAQ,EAAE,CACX;AACEC,QAAAA,KAAK,EAAE,QADT;AAEEC,QAAAA,eAAe,EAAE,CAAC,sBAAD,EAAyB,sBAAzB,EAAiD,sBAAjD,CAFnB;AAGEC,QAAAA,IAAI,EAAE,CAACZ,SAAS,CAACa,KAAX,EAAkBZ,SAAS,CAACY,KAA5B,EAAmCX,MAAM,CAACW,KAA1C;AAHR,OADW;AAFN,KADL;AAWD,IAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OADD;AAEPC,MAAAA,KAAK,EAAE;AAAED,QAAAA,OAAO,EAAE,IAAX;AAAiBE,QAAAA,IAAI,EAAG,oBAAmBd,OAAQ;AAAnD;AAFA,KAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADO,GAiBL,IAlBL;AAqBA,QAAMe,SAAS,GACdnB,SAAS,CAAC,CAAD,CAAT,gBACE,oBAAC,IAAD;AACD,IAAA,IAAI,EAAE;AACJS,MAAAA,MAAM,EAAET,SAAS,CAACoB,GAAV,CAAc,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAcA,IAA5B,CADJ;AAEJX,MAAAA,QAAQ,EAAE,CAAC;AACZG,QAAAA,IAAI,EAAEb,SAAS,CAACoB,GAAV,CAAeP,IAAD,IAAUA,IAAI,CAACZ,SAA7B,CADM;AAEZU,QAAAA,KAAK,EAAE,UAFK;AAGZW,QAAAA,WAAW,EAAE,SAHD;AAIZC,QAAAA,IAAI,EAAE;AAJM,OAAD,EAKP;AACJV,QAAAA,IAAI,EAAEb,SAAS,CAACoB,GAAV,CAAeP,IAAD,IAAUA,IAAI,CAACV,MAA7B,CADF;AAEJQ,QAAAA,KAAK,EAAE,QAFH;AAGJW,QAAAA,WAAW,EAAE,KAHT;AAIJV,QAAAA,eAAe,EAAE,sBAJb;AAKJW,QAAAA,IAAI,EAAE;AALF,OALO;AAFN,KADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,GAmBI,IApBL;AAuBE,sBACD;AAAK,IAAA,SAAS,EAAEzB,MAAM,CAAC0B,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIL,SADJ,CADC;AAKD,CA/DF;;AAiEC,eAAepB,KAAf,C,CAOD;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport { fetchDailyData } from '../../api';\n\nimport styles from './Chart.module.css';\n\n\nconst Chart = ({ dailyData: { confirmed, recovered, deaths } , country }) => {\n\tconst [dailyData, setDailyData] = useState({});\n  \n\tuseEffect(() => {\n\t  const fetchMyAPI = async () => {\n\t\tconst initialDailyData = await fetchDailyData();\n  \n\t\tsetDailyData(initialDailyData);\n\t  };\n  \n\t  fetchMyAPI();\n\t}, []);\n\n\n\tconst barChart = (\n\t\tconfirmed ? (\n\t\t  <Bar\n\t\t\tdata={{\n\t\t\t  labels: ['Infected', 'Recovered', 'Deaths'],\n\t\t\t  datasets: [\n\t\t\t\t{\n\t\t\t\t  label: 'People',\n\t\t\t\t  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\n\t\t\t\t  data: [confirmed.value, recovered.value, deaths.value],\n\t\t\t\t},\n\t\t\t  ],\n\t\t\t}}\n\t\t\toptions={{\n\t\t\t  legend: { display: false },\n\t\t\t  title: { display: true, text: `Current state in ${country}` },\n\t\t\t}}\n\t\t  />\n\t\t) : null\n\t  );\n\n\tconst lineChart = (\n\t\tdailyData[0] ? (\n\t\t  <Line\n\t\t\tdata={{\n\t\t\t  labels: dailyData.map(({ date }) => date),\n\t\t\t  datasets: [{\n\t\t\t\tdata: dailyData.map((data) => data.confirmed),\n\t\t\t\tlabel: 'Infected',\n\t\t\t\tborderColor: '#3333ff',\n\t\t\t\tfill: true,\n\t\t\t  }, {\n\t\t\t\tdata: dailyData.map((data) => data.deaths),\n\t\t\t\tlabel: 'Deaths',\n\t\t\t\tborderColor: 'red',\n\t\t\t\tbackgroundColor: 'rgba(255, 0, 0, 0.5)',\n\t\t\t\tfill: true,\n\t\t\t  },\n\t\t\t  ],\n\t\t\t}}\n\t\t  />\n\t\t) : null\n\t  );\n\t\n\t  return (\n\t\t<div className={styles.container}>\n\t\t  { lineChart}\n\t\t</div>\n\t  );\n\t};\n\t\n\texport default Chart;\n\n\n\n\n\n\n// const Chart = ({ dailyData }) => {\n// \twhile (!dailyData.length) {\n// \t\treturn 'Loading....';\n// \t}\n// \tconsole.log(dailyData);\n\n// \tlet result = dailyData.map(({ confirmed }) => confirmed);\n// \tlet deaths = dailyData.map(({ deaths }) => deaths);\n// \tlet date = dailyData.map(({ date }) => date);\n// \tconsole.log(result);\n\n// \tconst lineChart = (\n// \t\t<Line\n// \t\t\tdata={{\n// \t\t\t\tlables: [1,2,3,4,5,6],\n// \t\t\t\tdatasets: [\n// \t\t\t\t\t{\n// \t\t\t\t\t\tdata: [10000,20000,30000,40000,50000,60000],\n// \t\t\t\t\t\tlabel: 'Infected',\n// \t\t\t\t\t\tborderColor: '#3333ff',\n// \t\t\t\t\t\tfill: true\n// \t\t\t\t\t},\n// \t\t\t\t\t{\n// \t\t\t\t\t\tdata: [1000,2000,3000,4000,50000,60000],\n// \t\t\t\t\t\tlabel: 'Deaths',\n// \t\t\t\t\t\tborderColor: 'red',\n// \t\t\t\t\t\tbackgroundColor: 'rgba(225,0,0,0.5)',\n// \t\t\t\t\t\tfill: true\n// \t\t\t\t\t}\n// \t\t\t\t]\n// \t\t\t}}\n// \t\t/>\n// \t);\n// \t// ctx = document.getElementById(\"Chart1\").getContext(\"2d\");\n// \t// var lineChart = new Chart(ctx, {\n// \t// \ttype: 'line',\n// \t// \tdata: data,\n// \t//   });\n\n// \treturn <div className={styles.container}>{lineChart}</div>;\n// };\n\n// export default Chart;\n"]},"metadata":{},"sourceType":"module"}